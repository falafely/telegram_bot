from dotenv import load_dotenv, find_dotenv
from datetime import datetime
from modules import course
from keyboards.inline_keyboard import kb
from keyboards.keyboard import reply_kb
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InputFile
from create_bot import dp, bot
from modules import demotivator
from modules import gpt

load_dotenv(find_dotenv())  # –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ .env –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞


@dp.message_handler(commands=['start'])
async def start_mes(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∞–ª–∞—Ñ–µ–ª—É—Å - —Å–∞–º—ã–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞\n'
                                                 '–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ /help')
    await message.delete()


@dp.message_handler(commands=['help'])
@dp.message_handler(Text(equals='–ü–æ–º–æ—â—å', ignore_case=True))
async def help_mes(message: types.Message):
    await bot.send_sticker(message.from_user.id,
                           sticker='CAACAgIAAxkBAAEKItFk6lTqBc5NiBRFHq5WXbe_Gmct6AACriEAAjNY0UqtYYJRFpNzDjAE',
                           reply_markup=reply_kb)
    await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                           reply_markup=kb, )


# ==============================================================

# ChatGPT
# class FSMchatgpt(StatesGroup):
#     chat = State()
#
#
# @dp.message_handler(Text(equals='üìåüìåüìåüåêChatGPT', ignore_case=True), state=None)
# async def chatgpt_mes(message: types.Message):
#     await message.reply('<b>–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å ChatGPT</b>\n'
#                         '–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', parse_mode='HTML')
#     await FSMchatgpt.chat.set()
#
#
# @dp.message_handler(state=FSMchatgpt.chat)
# async def load_gpt_mes(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['chat'] = message.text
#     answer = gpt.chatgpt_mes(message.text)
#     await bot.send_message(message.from_user.id, answer)
#
#     await state.finish()
#
#
@dp.callback_query_handler(text='ChatGPT')
async def chatgpt_call(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, '<b>ChatGPT</b>\n'
                                                  '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—ã –ø–æ–ø–∞–¥–∞–µ—à—å –≤ –¥–∏–∞–ª–æ–≥ —Å–æ –≤–∑–µ–∑–Ω–∞—é—â–µ–º –≥—É—Ä—É - ChatGPT!\n'
                                                  '–¢—ã –±—É–¥–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á–∞—Ç–µ, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞", '
                                                  '–ø–æ—è–≤–∏–≤—à—É—é—Å—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.\n\n'
                                                  '<b>!(WARNING)!</b>\n\n'
                                                  '–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, '
                                                  '–Ω–æ –∞–≤—Ç–æ—Ä —É–ø–æ—Ä–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —ç—Ç–∏–º ‚ô°( ‚ó°‚Äø‚ó° )', parse_mode='HTML')
    await bot.send_message(callback.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                           reply_markup=kb, )
    await callback.answer()


# -------------------------------------------------------


# –î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä
class FSMdemotivator(StatesGroup):
    photo = State()
    desc = State()


@dp.message_handler(Text(equals='–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä', ignore_case=True))
@dp.message_handler(Command("demotivator"), state=None)
async def demotivator_mes(message: types.Message):
    await message.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ')
    await FSMdemotivator.photo.set()


@dp.message_handler(content_types=['photo'], state=FSMdemotivator.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await message.photo[-1].download('demotivator.jpg')
    await FSMdemotivator.next()
    await message.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å')


@dp.message_handler(state=FSMdemotivator.desc)
async def load_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    await demotivator.create_demot(user_photo='demotivator.jpg', user_text=message.text)
    photo = InputFile('demotivator.jpg')
    await bot.send_message(message.from_user.id, '–í–æ—Ç —Ç–≤–æ–π –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä')
    await bot.send_photo(message.from_user.id, photo=photo)

    await state.finish()


@dp.callback_query_handler(text='–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä')
async def demot_call(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, '</b>–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä</b>\n'
                                                  '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–π,'
                                                  '–Ω–æ –≤–∑–∞–º–µ–Ω —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª —Ç—ã —Å–∞–º! '
                                                  '(·É¶Àò‚å£Àò·É¶)', parse_mode='HTML')
    await bot.send_message(callback.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                           reply_markup=kb, )
    await callback.answer()


# -------------------------------------------------------

# –ö—É—Ä—Å BTC
@dp.message_handler(commands=['course'])
@dp.message_handler(Text(equals='–ö—É—Ä—Å BTC', ignore_case=True))
async def course_mes(message: types.Message):
    now = datetime.now()
    await bot.send_message(message.from_user.id, f'-----{now.strftime("%d-%m-%Y %H:%M:%S")}-----\n'
                                                 f'–ö—É—Ä—Å BTC - {course.btc()}')


@dp.callback_query_handler(text='–ö—É—Ä—Å BTC')
async def course_call(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, '<b>–ö—É—Ä—Å BTC</b>\n'
                                                  '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–æ–º Bitcoin –Ω–∞ –º–æ–º–µ–Ω—Ç '
                                                  '–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö\n'
                                                  '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '
                                                  '/course, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ä–∞–∑–±–æ–≥–∞—Ç–µ–ª–∏ Ôºº(Ôø£‚ñΩÔø£)Ôºè',
                           parse_mode='HTML')
    await bot.send_message(callback.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                           reply_markup=kb,)
    await callback.answer()


# -------------------------------------------------------

# –ê–Ω–µ–∫–¥–æ—Ç
@dp.message_handler(Text(equals='–ê–Ω–µ–∫–¥–æ—Ç', ignore_case=True))
async def anecdote_mes(message: types.Message):
    await message.answer('Don\'t work')


@dp.callback_query_handler(text='–ê–Ω–µ–∫–¥–æ—Ç')
async def anecdote_call(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, '<b>–ê–Ω–µ–∫–¥–æ—Ç</b>\n'
                                                  '–§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç '
                                                  '–∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n'
                                                  '<b>!(WARNING)!</b>\n\n'
                                                  '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∞–≤—Ç–æ—Ä –¥–µ–ª–∞–µ—Ç '
                                                  '–≤—Å–µ, —á—Ç–æ –≤ –µ–≥–æ —Å–∏–ª–∞—Ö, —á—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! („Å£Àò⁄°ÀòœÇ)',
                           parse_mode='HTML')
    await bot.send_message(callback.from_user.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                           reply_markup=kb,)
    await callback.answer()


# -------------------------------------------------------

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—ã')


# ==============================================================

def reg_mod(dp: Dispatcher):
    dp.register_message_handler(start_mes, commands=['start'])
    dp.register_message_handler(demotivator_mes, state=None)
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMContext)
    dp.register_message_handler(load_desc, state=FSMContext)
    dp.register_message_handler(echo)
